Description du projet
Une nouvelle entreprise de l’Internet des Objets, Intelligent Data for the Internet Of Things, a récemment installé un nouveau data-center dans la région. Celui-ci lui permettra l’acheminement et la collecte des données issus des senseurs de ses clients. Cette entreprise valorise alors ces données en effectuant de la prédiction statistique intensive. Ces données sont donc critiques pour sa réussite et nécessitent un protocole de transport pour leur acheminement jusqu’au data-center.
Pour se faire, elle a conçu Truncated Reliable Transport Protocol (TRTP), un protocole de transport fiable basé sur des segments UDP. Elle désire une implémentation performante dans le langage C qui ne contient aucune fuite de mémoire1. TRTP permettra de réaliser des transferts fiables de fichiers, utilisera la stratégie du selective repeat 2 et permettra la troncation des données 3. Comme l’architecture du réseau de l’entreprise est uniquement basée sur IPv6, TRTP devra fonctionner au-dessus de ce protocole.
Ce projet est à faire par groupe de deux étudiants.
Un émetteur et un recepteur sont nécessaires pour établir un transfert de données entre deux machines distantes utilisant TRTP. Votre groupe sera désigné responsable de la réalisation d’un seul des deux programmes.
L’implémentation du protocole devra permettre de réaliser un transfert de données unidirectionnel au moyen de deux programmes, sender et receiver. Vous serez chargés de l’implémentation d’un seul de ces deux programmes. Ces programmes devront être produits au moyen de la cible par défaut d’un Makefile. Votre implémentation DOIT fonctionner sur les ordinateurs Linux de la salle Intel, bâtiment Réaumur 6.
Chaque programme nécessite au minimum deux arguments pour se lancer : hostname et port. hostname est un nom de domaine ou une adresse IPv6 et port est le numéro de port UDP. Pour le programme sender, ils permettent de désigner le receiver à contacter. Pour le programme receiver, ils désignent la source des connexions à accepter7.
Sans autres arguments, le sender lit sur l’entrée standard et envoie son contenu au receiver. Ce contenu se termine au signalement d’EOF. Sans autres arguments également, le receiver attend des connexions entrantes de plusieurs sender 8 et stocke chaque fichier reçu. Les fichiers reçus sont stockés dans le répertoire courant et sont numérotés à partir de zero dans l’ordre dans lequel les connexions desquelles ils sont issus sont ouvertes.
Par ailleurs, le programme sender supportera l’argument optionnel -f filename, qui spécifie un fichier nommé filename à envoyer. Seul la présence du fichier est garantie, son contenu peut être de différents types et donc potentiellement binaire. Le programme receiver supportera l’argu- ment optionnel -o format, qui spécifie un format de formattage pour les fichiers reçus. Ce format est conforme avec la spécification du format des fonctions printf, sprintf et autres variantes 9. Il DOIT spécifier un seul entier à convertir, e.g. %d ou fichier_%02d.dat. L’argument -m N spécifie le nombre N de connexions que le receiver DOIT pouvoir traiter de façon concurrente.
Les deux programmes doivent utiliser la sortie d’erreur standard s’ils veulent afficher des infor- mations à l’utilisateur.

Étapes conseillées pour réaliser le projet
Pour vous faciliter la réalisation du projet, nous vous proposons cette liste de sous-tâches que vous devriez effectuer.
1. Implémentation de l’encodage et du décodage des paquets (en particulier, faites attention à l’endianness des champs) dans une approche orientée tests. Une tâche INGInious10 est prévue pour vous aider, il est fortement conseillé de la réaliser.
2. Implémentation d’un sender ou d’un receiver simple sur UDP via l’API socket.
3. Fonctionnement du protocole TRTP avec un échange d’un paquet unique sur un réseau parfait.
4. (Pour le receiver uniquement) Implémentation des connexions simultanées.
5. Fonctionnement du protocole TRTP avec des échanges de n’importe quelle taille avec le respect de toutes les spécifications sur un lien qui présente juste de la latence (par exemple, 200 ms), avec une suite de tests black-box vérifiant cela.
6. Fonctionnement du protocole TRTP sous toutes les conditions réseaux possibles (pertes, corrup- tion, troncation, jitter, latence) avec une suite de tests black-box vérifiant cela.
7. Évaluation des performances et identification de la partie critique de votre implémentation.
